import 'dotenv/config';
import express from "express";
import { Bot, webhookCallback } from "grammy";
import { createClient } from "@supabase/supabase-js";
import { Redis } from "@upstash/redis";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.BOT_TOKEN || !process.env.SUPABASE_URL || !process.env.SUPABASE_KEY || !process.env.UPSTASH_URL || !process.env.UPSTASH_TOKEN) {
  console.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
  process.exit(1);
}

const bot = new Bot(process.env.BOT_TOKEN);
console.log("ü§ñ BOT_TOKEN:", process.env.BOT_TOKEN ? "–∑–∞–≥—Ä—É–∂–µ–Ω ‚úÖ" : "–Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå");

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
const redis = new Redis({
  url: process.env.UPSTASH_URL,
  token: process.env.UPSTASH_TOKEN,
});

redis.set("test_key", "test_value")
  .then(() => console.log("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"))
  .catch(err => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Redis:", err);
    process.exit(1);
  });

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook
const app = express();
app.use(express.json());
app.use("/webhook", webhookCallback(bot, "express"));

const isProduction = process.env.NODE_ENV === "production";
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞
  const webhookStatus = await bot.api.getWebhookInfo();

  if (isProduction) {
    // –ï—Å–ª–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω-—Å—Ä–µ–¥–µ –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ
    if (!webhookStatus.url) {
      const webhookUrl = `https://${process.env.RENDER_EXTERNAL_HOSTNAME}/webhook`;
      try {
        await bot.api.setWebhook(webhookUrl);  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–µ—Ä–≤–µ—Ä–∞
        console.log(`üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:", err);
      }
    } else {
      console.log("‚úÖ Webhook —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. Polling –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.");
    }
  } else {
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    if (!webhookStatus.url) {
      console.log("üîÑ –í–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...");
      await bot.start(); // –ó–∞–ø—É—Å–∫–∞–µ–º polling
    } else {
      console.log("‚úÖ Webhook —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, polling –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.");
    }
  }
});
