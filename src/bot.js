// === –ò–º–ø–æ—Ä—Ç—ã ===
import 'dotenv/config';
import express from "express";
import { Bot, webhookCallback } from "grammy";   // ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏ Bot
import { createClient } from "@supabase/supabase-js";
import { Redis } from "@upstash/redis";

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
const bot = new Bot(process.env.BOT_TOKEN); // ‚úÖ —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º:", process.env.BOT_TOKEN ? "‚úÖ –Ω–∞–π–¥–µ–Ω" : "‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase ===
console.log("Supabase URL:", process.env.SUPABASE_URL);
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis ===
console.log("Upstash URL:", process.env.UPSTASH_URL);
const redis = new Redis({
  url: process.env.UPSTASH_URL,
  token: process.env.UPSTASH_TOKEN,
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
redis.set("test_key", "test_value")
  .then(() => console.log("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"))
  .catch((err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Redis:", err);
    process.exit(1);
  });

// === –ö–æ–º–∞–Ω–¥—ã ===
bot.command("start", async (ctx) => {
  const user = ctx.from;

  try {
    await supabase.from("users").upsert({
      telegram_id: user.id,
      username: user.username,
    });

    await redis.set(`user:${user.id}`, user.username);

    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! –Ø —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ Webhook üéØ`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

bot.command("whoami", async (ctx) => {
  try {
    const name = await redis.get(`user:${ctx.from.id}`);
    ctx.reply(`–¢—ã: ${name}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /whoami:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// === –°–æ–∑–¥–∞—ë–º express-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Webhook ===
const app = express();
app.use(express.json());
app.use("/webhook", webhookCallback(bot, "express"));

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render ===
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

  const webhookUrl = `https://${process.env.RENDER_EXTERNAL_HOSTNAME}/webhook`;

  try {
    await bot.api.setWebhook(webhookUrl);
    console.log(`üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:", err);
  }
});

